environ({'TMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'PYTHONIOENCODING': 'utf_8', 'COMPUTERNAME': 'JH23', 'VS140COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'USERDOMAIN': 'JH23', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'NLS_LANG': 'SIMPLIFIED CHINESE_CHINA.ZHS16GBK', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 60 Stepping 3, GenuineIntel', '--SSLKEYLOGFILE': 'D:/ssl.log', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '3c03', 'SYSTEMROOT': 'C:\\Windows', 'PATH': 'C:\\Python\\Python36\\Scripts\\;C:\\Python\\Python36\\;E:\\Ruby23-x64\\bin;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin;E:\\Ruby23-x64\\lib\\ruby\\gems\\2.3.0\\gems\\geckodriver-v0.11.1-win64;E:\\Ruby23-x64\\lib\\ruby\\gems\\2.3.0\\gems\\geckodriver-v0.11.1-win64\\geckodriver.exe;C:\\Program Files\\VisualSVN Server\\bin;C:\\Program Files (x86)\\Subversion\\bin;C:\\Program Files\\Mercurial\\;C:\\Program Files\\TortoiseSVN\\bin;C:\\php-5.6.31-Win32-VC11-x64;C:\\php-5.6.31-Win32-VC11-x64\\ext;C:\\Program Files\\Java\\jdk1.8.0_172\\bin:\\apache-maven-3.5.2\\bin;C:\\nodejs\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\gradle-4.7\\bin;C:\\Users\\Administrator\\AppData\\Roaming\\npm', 'BSPRINT_CLIENT': 'C:/Users/Administrator/AppData/Roaming/Brocadesoft', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'WINDOWS_TRACING_FLAGS': '3', 'HADOOP_USER_NAME': 'hbase/dsjdb6.kaifa.com@KAIFA.COM', 'JDK_HOME': 'C:\\Program Files\\Java\\jdk1.7.0_79', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'ORACLE_HOME': 'C:\\instantclient', 'WINDIR': 'C:\\Windows', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'VISUALSVN_SERVER': 'C:\\Program Files\\VisualSVN Server\\', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'APR_ICONV_PATH': 'C:\\Program Files (x86)\\Subversion\\iconv', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\Administrator\\AppData\\Local', 'HOMEPATH': '\\Users\\Administrator', 'M2_HOME': 'C:\\apache-maven-3.5.2', 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk1.8.0_172', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'Administrator', 'JRE_HOME': 'C:\\Program Files\\Java\\jre1.8.0_111', 'LOGONSERVER': '\\\\JH23', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'RAILS_ENV': 'production', 'PROGRAMDATA': 'C:\\ProgramData', 'PYTHONPATH': 'd:\\PycharmProjects\\IWaPython\\examples\\hackExample\\chapter7;d:\\PycharmProjects\\IWaPython', 'JAVA_TOOL_OPTIONS': '-Dfile.encoding=UTF-8', 'USERDNSDOMAIN': 'KAIFA.COM', 'SESSIONNAME': 'Console', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.RB;.RBW;.PY;.PYW', 'ASL.LOG': 'Destination=file', 'FP_NO_HOST_CHECK': 'NO', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'GRADLE_HOME': 'C:\\Program Files\\gradle-4.7', 'OPENSSL_CONF': 'C:\\OpenSSL-Win64\\bin\\openssl.cfg', 'TEMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'HOMEDRIVE': 'C:', 'HADOOP_HOME': 'C:\\hadoop-common-2.2.0-bin-master', 'SYSTEMDRIVE': 'C:', 'WINGDB_SPAWNCOOKIE': 'LmdJqt4Q9NVSTp7d', 'NUMBER_OF_PROCESSORS': '2', 'APPDATA': 'C:\\Users\\Administrator\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\Administrator', 'WINGDB_PARENT_PIDS': '9560', 'WINGDB_ACTIVE': '9560'})